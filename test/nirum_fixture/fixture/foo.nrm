import fixture.foo.bar (path-unbox, point, int-unbox);
import fixture.qux (path, name);

unboxed float-unbox (float64);
# Unboxed type docs.

unboxed imported-type-unbox (path-unbox);
unboxed way (path);

type irum = name;
# Type alias docs.

enum gender
    # Enum docs.
    = female/yeoseong
    | male
    ;
enum eva-char = soryu-asuka-langley
              | ayanami-rei
              | ikari-shinji
              | katsuragi-misato
              | nagisa-kaworu
              ;

enum reserved-keyword-enum = mro | no-mro;
union reserved-keyword-union = mro | no-mro;

record point1 (
    # Record docs.
    bigint left/x,
    # Record field docs.
    bigint top,
);
record point2 (
    int-unbox left,
    # Record field docs.
    int-unbox top,
);
record point3d (
    point xy,
    int64 z,
);
record line (
    bigint length,
);
record record-with-optional-record-field (
    point1? f,
);

record import-typing (
    // see also: https://github.com/spoqa/nirum/issues/93
    bigint? an-optional-field,
);

union mixed-name = western-name ( text first-name
                                , text middle-name
                                , text last-name
                                )
                 | east-asian-name ( text family-name
                                   , text given-name
                                   )
                 | culture-agnostic-name (text fullname)
                 ;
union music
    # Union docs.
    = pop ( text country
          # Tag field docs.
          )
    # Tag docs.
    | rnb/rhythm-and-ballad (text country)
    ;
union status = run
             | stop
             ;

record song (
  text name,
);

record album (
  text name,
  [song] tracks,
);

service null-service ();

@error
union rpc-error = connection-lose-error
                | not-found-error (text message,)
                ;

service ping-service (
    # Service docs.

    @http-resource(method="GET", path="/ping")
    @quote(single="'", triple="'''")
    @unicode(unicode="유니코드")
    bool ping (
        # Method docs.
        text nonce,
        # Parameter docs.
    ) throws rpc-error,

    no-return-method (int32 foo),
    no-return-method2 (int32 foo) throws rpc-error,
);

record person (
  irum first-name,
  irum last-name,
);

record people (
  {person} people
);

record product (
    text name,
    int64? price,
    bool sale,
    uri? url,
);

union animal = cat
             | dog (text name, text? kind, int64 age, int64? weight)
             ;

service sample-service (
    sample-method (animal a, product b/bb, gender c, way d/dd,
                   uuid e, binary f/ff, bigint g, text h/hh),
    optional-parameter-method (bigint r, bigint? o),
);

record record-with-map (
    {text: text} text-to-text,
);
