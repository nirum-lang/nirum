# Module consists zero or more type declarations
# ==============================================

unboxed offset (float64);
# The key difference between unboxed type and reocrd type consisting of a single
# field is that the former has the same JSON representation to its target type,
# while the latter has thicker JSON representation than its only field.
#
# For example, a value of `unboxed offset (float);` type is represented
# in JSON as:
#
#     120.5
#
# While a value of `record offset (float position);` type is represented
# in JSON as:
#
#     {"position": 120.5}
#
# What does it mean?  It means, for instance, you can safely change a primitive
# type `float` to its unboxed type `offset` with backward compatibility.

record point (
    # Record type definition.

    offset left/x,
    # for backward compatibility, you can specify *behind name*.

    offset top,
    # trailing comma is okay
);

union shape
    # Type constructors in a sum type become translated to subtypes in OO
    # languages, and datatypes in functional languages.
    = rectangle (point upper-left, point lower-right)
    | circle (point origin, offset radius)
    ;

// This is comment.  Note that there are important differences between
// `#` comment syntax and `//` comment syntax:  the former is for docs
// thus captured as AST, while the latter is for just comments thus eliminated
// after parsing.
